{"version":3,"sources":["reportWebVitals.js","components/ImageView.jsx","components/EffectsView.jsx","algorithms/grayscale.js","algorithms/util.js","algorithms/lightness.js","algorithms/saturation.js","algorithms/contrast.js","algorithms/blur.js","components/LightnessView.jsx","components/SaturationView.jsx","components/ContrastView.jsx","components/BlurView.jsx","components/EffectsWindow.jsx","components/App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ImageView","onDrop","image","react","FileDrop","targetClassName","style","width","height","background","replace","AddButton","onClick","className","cursor","backgroundColor","Effect","_ref2","removeEffect","effect","color","name","args","EffectsView","_ref3","effects","setVisibility","EffectsView_AddButton","map","EffectsView_Effect","key","toGrayscale","imgPixels","imgWidth","imgHeight","result","Uint8ClampedArray","length","i","avg","clamp","value","Math","max","min","floor","setLightness","lightness","applyMatrix","mat","r","g","b","setSaturation","s","Number","matrix","rgb","setContrast","contrast","buf","midBright","a","blur","radius","pixelCount","resultR","resultG","resultB","pixelsR","pixelsG","pixelsB","bxs","boxesForGauss","boxBlur","sigma","n","wIdeal","sqrt","wl","wu","mIdeal","m","round","sizes","push","scl","tcl","w","h","boxBlurH","boxBlurT","j","val","ix","iy","LightnessView","preview","apply","_React$useState","React","_React$useState2","Object","slicedToArray","setValue","padding","InputLabel","Slider","margin","size","defaultValue","aria-label","valueLabelDisplay","getAriaValueText","Button","variant","SaturationView","ContrastView","BlurView","EffectsWindow","shown","addEffect","previewEffect","forceUpdate","currentView","setCurrentView","lightnessEffect","close","saturationEffect","contrastEffect","blurEffect","force","arguments","undefined","cjs_default","handle","defaultPosition","x","y","display","overflowY","overflowX","List","ListItem","LightnessView_LightnessView","SaturationView_SaturationView","ContrastView_ContrastView","BlurView_BlurView","App","imgLoaded","setImgLoaded","_React$useState3","_React$useState4","imgSrc","setImgSrc","_React$useState5","_React$useState6","setImgWidth","_React$useState7","_React$useState8","setImgHeight","_React$useState9","_React$useState10","setImgPixels","_React$useState11","_React$useState12","setResult","_React$useState13","_React$useState14","effectsWindow","setEffectsWindow","_React$useState15","_React$useState16","setEffects","_React$useState17","_React$useState18","lastKey","setLastKey","onImageLoad","path","src","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","drawImage","data","getImageData","onFileLoad","Image","onload","target","onFileDrop","files","reader","FileReader","readAsDataURL","displayImage","pixels","ImageData","putImageData","toDataURL","applyEffects","newEffects","newImage","params","toConsumableArray","id","type","onChange","visibility","position","hiddenElement","href","download","click","htmlFor","ImageView_ImageView","EffectsView_EffectsView","index","findIndex","slice","concat","EffectsWindow_EffectsWindow","newEffect","ReactDOM","createRoot","getElementById","render","react_default","StrictMode","App_App"],"mappings":"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","file":"static/js/main.1c32c91d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import '../styles/ImageView.css';\nimport * as React from 'react';\nimport { FileDrop } from 'react-file-drop';\n\nconst ImageView = ({ onDrop, image }) => {\n    return (\n        <FileDrop targetClassName='imageview-drop-target' onDrop={onDrop}>\n            <div style={{\n                width: \"100%\",\n                height: \"100%\",\n                background: \"center / contain no-repeat url('\" + image.replace(/(\\r\\n|\\r|\\n)/gm, '') + \"')\"\n            }} />\n        </FileDrop>\n    );\n}\n\nexport { ImageView };\n","import '../styles/EffectsView.css';\nimport * as React from 'react';\n\nconst AddButton = ({ onClick }) => {\n    return (\n        <div onClick={onClick} className=\"effect\" style={{ cursor: \"pointer\", backgroundColor: \"#444\" }}>\n            <div className=\"add-button\">+</div>\n        </div>\n    );\n}\n\nconst Effect = ({ removeEffect, effect }) => {\n    return (\n        <div\n            className=\"effect\"\n            style={{ backgroundColor: effect.color }}\n            onClick={() => removeEffect(effect)}\n        >\n            {effect.name}\n            <br></br>\n            {effect.args}\n        </div>\n    );\n}\n\nconst EffectsView = ({ effects, setVisibility, removeEffect }) => {\n    return (\n        <div className=\"effects-view\">\n            <AddButton onClick={() => setVisibility(true)} />\n            {\n                effects.map(effect => {\n                    return <Effect\n                        key={effect.key}\n                        removeEffect={removeEffect}\n                        effect={effect}\n                    />;\n                })\n            }\n        </div>\n    );\n}\n\nexport { EffectsView };\n","const toGrayscale = (imgPixels, imgWidth, imgHeight) => {\n    const result = new Uint8ClampedArray(imgPixels.length);\n    for (let i = 0; i < imgPixels.length; i += 4) {\n        const avg = (imgPixels[i + 0] + imgPixels[i + 1] + imgPixels[i + 2]) / 3;\n        result[i + 0] = result[i + 1] = result[i + 2] = avg;\n        result[i + 3] = imgPixels[i + 3];\n    }\n    return result;\n}\n\nexport { toGrayscale };\n","const clamp = (value) => {\n    return Math.max(0, Math.min(Math.floor(value), 255));\n}\n\nconst RGBtoHSL = (imgPixels) => {\n    const result = new Float64Array(imgPixels.length);\n    for (let i = 0; i < imgPixels.length; i += 4) {\n        const r = imgPixels[i + 0] / 255;\n        const g = imgPixels[i + 1] / 255;\n        const b = imgPixels[i + 2] / 255;\n        const min = Math.min(r, g, b);\n        const max = Math.max(r, g, b);\n\n        let h;\n        let s;\n        let v = max;\n        let delta = max - min;\n\n        if (max !== 0)\n            s = delta / max;\n        else {\n            s = 0;\n            h = -1;\n            result[i + 0] = h;\n            result[i + 1] = s;\n            result[i + 2] = undefined;\n            result[i + 3] = imgPixels[i + 3];\n            continue;\n        }\n\n        if (r === max)\n            h = (g - b) / delta;\n        else if (g === max)\n            h = 2 + (b - r) / delta;\n        else\n            h = 4 + (r - g) / delta;\n\n        h *= 60;\n        if (h < 0)\n            h += 360;\n        if (isNaN(h))\n            h = 0;\n\n        result[i + 0] = h;\n        result[i + 1] = s;\n        result[i + 2] = v;\n        result[i + 3] = imgPixels[i + 3];\n    }\n    return result;\n};\n\nconst HSLtoRGB = (imgPixels) => {\n    const result = new Uint8ClampedArray(imgPixels.length);\n    for (let i = 0; i < imgPixels.length; i += 4) {\n        var r, g, b;\n        const h = imgPixels[i + 0] / 60;\n        const s = imgPixels[i + 1];\n        const v = imgPixels[i + 2];\n\n        if (s === 0) {\n            r = g = b = v;\n            result[i + 0] = r;\n            result[i + 1] = g;\n            result[i + 2] = b;\n            result[i + 3] = imgPixels[i + 3];\n            continue;\n        }\n\n        const j = Math.floor(h);\n        const f = h - j;\n        const p = v * (1 - s);\n        const q = v * (1 - s * f);\n        const t = v * (1 - s * (1 - f));\n\n        switch (j) {\n            case 0:\n                r = v;\n                g = t;\n                b = p;\n                break;\n            case 1:\n                r = q;\n                g = v;\n                b = p;\n                break;\n            case 2:\n                r = p;\n                g = v;\n                b = t;\n                break;\n            case 3:\n                r = p;\n                g = q;\n                b = v;\n                break;\n            case 4:\n                r = t;\n                g = p;\n                b = v;\n                break;\n            default:\n                r = v;\n                g = p;\n                b = q;\n                break;\n        }\n\n        result[i + 0] = clamp(r * 255);\n        result[i + 1] = clamp(g * 255);\n        result[i + 2] = clamp(b * 255);\n        result[i + 3] = imgPixels[i + 3];\n    }\n    return result;\n}\n\nexport { clamp, RGBtoHSL, HSLtoRGB };\n","import { clamp } from './util';\n\nconst setLightness = (imgPixels, imgWidth, imgHeight, value) => {\n    const lightness = value * 3;\n    const result = new Uint8ClampedArray(imgPixels.length);\n    for (let i = 0; i < imgPixels.length; i += 4) {\n        result[i + 0] = clamp(imgPixels[i + 0] + lightness);\n        result[i + 1] = clamp(imgPixels[i + 1] + lightness);\n        result[i + 2] = clamp(imgPixels[i + 2] + lightness);\n        result[i + 3] = imgPixels[i + 3];\n    }\n    return result;\n}\n\nexport { setLightness };\n","const applyMatrix = (mat, r, g, b) => {\r\n    const tr = r * mat[0][0] + g * mat[1][0] + b * mat[2][0] + mat[3][0];\r\n    const tg = r * mat[0][1] + g * mat[1][1] + b * mat[2][1] + mat[3][1];\r\n    const tb = r * mat[0][2] + g * mat[1][2] + b * mat[2][2] + mat[3][2];\r\n    return [tr, tg, tb];\r\n}\r\n\r\nconst setSaturation = (imgPixels, imgWidth, imgHeight, value) => {\r\n    const result = new Uint8ClampedArray(imgPixels.length);\r\n    const s = (Number(value) * 2 + 100) / 100;\r\n    const rwgt = 0.3086;\r\n    const gwgt = 0.6094;\r\n    const bwgt = 0.0820;\r\n    const a = (1.0 - s) * rwgt + s;\r\n    const b = (1.0 - s) * rwgt;\r\n    const c = (1.0 - s) * rwgt;\r\n    const d = (1.0 - s) * gwgt;\r\n    const e = (1.0 - s) * gwgt + s;\r\n    const f = (1.0 - s) * gwgt;\r\n    const g = (1.0 - s) * bwgt;\r\n    const h = (1.0 - s) * bwgt;\r\n    const i = (1.0 - s) * bwgt + s;\r\n    const matrix = [\r\n        [a, b, c, 0],\r\n        [d, e, f, 0],\r\n        [g, h, i, 0],\r\n        [0, 0, 0, 1]\r\n    ];\r\n    for (let i = 0; i < imgPixels.length; i += 4) {\r\n        const rgb = applyMatrix(matrix, imgPixels[i + 0], imgPixels[i + 1], imgPixels[i + 2]);\r\n        result[i + 0] = rgb[0];\r\n        result[i + 1] = rgb[1];\r\n        result[i + 2] = rgb[2];\r\n        result[i + 3] = imgPixels[i + 3];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport { setSaturation };\r\n","import { clamp } from \"./util\";\r\n\r\nconst setContrast = (imgPixels, imgWidth, imgHeight, value) => {\r\n    const contrast = (value * 4 + 256);\r\n    const result = new Uint8ClampedArray(imgPixels.length);\r\n    \r\n    const buf = new Uint8ClampedArray(256);\r\n    let midBright = 0;\r\n    for (let i = 0; i < imgPixels.length; i += 4) {\r\n        midBright += imgPixels[i + 0] * 77 + imgPixels[i + 1] * 150 + imgPixels[i + 2] * 29;\r\n    }\r\n    midBright = Math.floor(midBright / (256 * imgPixels.length / 3));\r\n\r\n    for (let i = 0; i < 256; i++) {\r\n        const a = Math.floor((((i - midBright) * contrast) / 256) + midBright);\r\n        buf[i] = clamp(a);\r\n    }\r\n\r\n    for (let i = 0; i < imgPixels.length; i += 4) {\r\n        result[i + 0] = buf[imgPixels[i + 0]];\r\n        result[i + 1] = buf[imgPixels[i + 1]];\r\n        result[i + 2] = buf[imgPixels[i + 2]];\r\n        result[i + 3] = imgPixels[i + 3];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport { setContrast };\r\n","const blur = (imgPixels, imgWidth, imgHeight, radius) => {\r\n    const pixelCount = imgPixels.length / 4;\r\n    \r\n    const result = new Uint8ClampedArray(imgPixels.length);\r\n    const resultR = new Uint8ClampedArray(pixelCount);\r\n    const resultG = new Uint8ClampedArray(pixelCount);\r\n    const resultB = new Uint8ClampedArray(pixelCount);\r\n\r\n    const pixelsR = new Uint8ClampedArray(pixelCount);\r\n    const pixelsG = new Uint8ClampedArray(pixelCount);\r\n    const pixelsB = new Uint8ClampedArray(pixelCount);\r\n    \r\n    // Split channels\r\n    for (let i = 0; i < pixelCount; i++) {\r\n        pixelsR[i] = imgPixels[i * 4 + 0];\r\n        pixelsG[i] = imgPixels[i * 4 + 1];\r\n        pixelsB[i] = imgPixels[i * 4 + 2];\r\n        result[i * 4 + 3] = imgPixels[i * 4 + 3];\r\n    }\r\n\r\n    const bxs = boxesForGauss(radius, 3);\r\n    // Red channel\r\n    boxBlur (pixelsR, resultR, imgWidth, imgHeight, (bxs[0]-1)/2);\r\n    boxBlur (resultR, pixelsR, imgWidth, imgHeight, (bxs[1]-1)/2);\r\n    boxBlur (pixelsR, resultR, imgWidth, imgHeight, (bxs[2]-1)/2);\r\n    // Green channel\r\n    boxBlur (pixelsG, resultG, imgWidth, imgHeight, (bxs[0]-1)/2);\r\n    boxBlur (resultG, pixelsG, imgWidth, imgHeight, (bxs[1]-1)/2);\r\n    boxBlur (pixelsG, resultG, imgWidth, imgHeight, (bxs[2]-1)/2);\r\n    // Blue channel\r\n    boxBlur (pixelsB, resultB, imgWidth, imgHeight, (bxs[0]-1)/2);\r\n    boxBlur (resultB, pixelsB, imgWidth, imgHeight, (bxs[1]-1)/2);\r\n    boxBlur (pixelsB, resultB, imgWidth, imgHeight, (bxs[2]-1)/2);\r\n\r\n    // Join channels\r\n    for (let i = 0; i < pixelCount; i++) {\r\n        result[i * 4 + 0] = resultR[i];\r\n        result[i * 4 + 1] = resultG[i];\r\n        result[i * 4 + 2] = resultB[i];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nconst boxesForGauss = (sigma, n) => {\r\n    // Ideal averaging filter width\r\n    var wIdeal = Math.sqrt((12*sigma*sigma/n)+1);\r\n    var wl = Math.floor(wIdeal);  if(wl%2===0) wl--;\r\n    var wu = wl+2;\r\n\t\t\t\t\r\n    var mIdeal = (12*sigma*sigma - n*wl*wl - 4*n*wl - 3*n)/(-4*wl - 4);\r\n    var m = Math.round(mIdeal);\r\n    // var sigmaActual = Math.sqrt( (m*wl*wl + (n-m)*wu*wu - n)/12 );\r\n\t\t\t\t\r\n    var sizes = [];  for(var i=0; i<n; i++) sizes.push(i<m?wl:wu);\r\n    return sizes;\r\n}\r\n\r\nconst boxBlur = (scl, tcl, w, h, r) => {\r\n    for(var i=0; i<scl.length; i++) tcl[i] = scl[i];\r\n    boxBlurH(tcl, scl, w, h, r);\r\n    boxBlurT(scl, tcl, w, h, r);\r\n}\r\n\r\nconst boxBlurH = (scl, tcl, w, h, r) => {\r\n    for(var i=0; i<h; i++)\r\n        for(var j=0; j<w; j++)  {\r\n            var val = 0;\r\n            for(var ix=j-r; ix<j+r+1; ix++) {\r\n                var x = Math.min(w-1, Math.max(0, ix));\r\n                val += scl[i*w+x];\r\n            }\r\n            tcl[i*w+j] = val/(r+r+1);\r\n        }\r\n}   \r\n\r\nconst boxBlurT = (scl, tcl, w, h, r) => {\r\n    for(var i=0; i<h; i++) {\r\n        for(var j=0; j<w; j++) {\r\n            var val = 0;\r\n            for(var iy=i-r; iy<i+r+1; iy++) {\r\n                var y = Math.min(h-1, Math.max(0, iy));\r\n                val += scl[y*w+j];\r\n            }\r\n            tcl[i*w+j] = val/(r+r+1);\r\n        }\r\n    }\r\n}\r\n\r\nexport { blur };\r\n","import * as React from 'react';\nimport * as Material from '@mui/material';\n\nimport { setLightness } from '../algorithms/lightness';\n\nconst LightnessView = ({ preview, apply }) => {\n    const [value, setValue] = React.useState(0);\n\n    const getAriaValueText = (value) => {\n        setValue(value);\n        preview(setLightness, [ value ]);\n    }\n\n    return (\n        <div style={{ padding: \"16px\" }}>\n            <Material.InputLabel style={{ color: \"#fff\" }}>\n                Lightness\n            </Material.InputLabel>\n            <Material.Slider\n                style={{ margin: \"8px 0px 8px 0px\" }}\n                size=\"small\"\n                defaultValue={0}\n                aria-label=\"Small\"\n                valueLabelDisplay=\"auto\"\n                min={-50}\n                max={50}\n                getAriaValueText={getAriaValueText}>\n            </Material.Slider>\n            <Material.Button\n                onClick={() => apply(value)}\n                variant=\"outlined\">\n                Apply\n            </Material.Button>\n        </div>\n    );\n}\n\nexport { LightnessView };\n","import * as React from 'react';\r\nimport * as Material from '@mui/material';\r\n\r\nimport { setSaturation } from '../algorithms/saturation';\r\n\r\nconst SaturationView = ({ preview, apply }) => {\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const getAriaValueText = (value) => {\r\n        setValue(value);\r\n        preview(setSaturation, [ value ]);\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: \"16px\" }}>\r\n            <Material.InputLabel style={{ color: \"#fff\" }}>\r\n                Saturation\r\n            </Material.InputLabel>\r\n            <Material.Slider\r\n                style={{ margin: \"8px 0px 8px 0px\" }}\r\n                size=\"small\"\r\n                defaultValue={0}\r\n                aria-label=\"Small\"\r\n                valueLabelDisplay=\"auto\"\r\n                min={-50}\r\n                max={50}\r\n                getAriaValueText={getAriaValueText}>\r\n            </Material.Slider>\r\n            <Material.Button\r\n                onClick={() => apply(value)}\r\n                variant=\"outlined\">\r\n                Apply\r\n            </Material.Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { SaturationView };","import * as React from 'react';\r\nimport * as Material from '@mui/material';\r\n\r\nimport { setContrast } from '../algorithms/contrast';\r\n\r\nconst ContrastView = ({ preview, apply }) => {\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const getAriaValueText = (value) => {\r\n        setValue(value);\r\n        preview(setContrast, [ value ]);\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: \"16px\" }}>\r\n            <Material.InputLabel style={{ color: \"#fff\" }}>\r\n                Contrast\r\n            </Material.InputLabel>\r\n            <Material.Slider\r\n                style={{ margin: \"8px 0px 8px 0px\" }}\r\n                size=\"small\"\r\n                defaultValue={0}\r\n                aria-label=\"Small\"\r\n                valueLabelDisplay=\"auto\"\r\n                min={-50}\r\n                max={50}\r\n                getAriaValueText={getAriaValueText}>\r\n            </Material.Slider>\r\n            <Material.Button\r\n                onClick={() => apply(value)}\r\n                variant=\"outlined\">\r\n                Apply\r\n            </Material.Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { ContrastView };\r\n","import * as React from 'react';\r\nimport * as Material from '@mui/material';\r\n\r\nimport { blur } from '../algorithms/blur';\r\n\r\nconst BlurView = ({ preview, apply }) => {\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const getAriaValueText = (value) => {\r\n        setValue(value);\r\n        preview(blur, [ value ]);\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: \"16px\" }}>\r\n            <Material.InputLabel style={{ color: \"#fff\" }}>\r\n                Radius\r\n            </Material.InputLabel>\r\n            <Material.Slider\r\n                style={{ margin: \"8px 0px 8px 0px\" }}\r\n                size=\"small\"\r\n                defaultValue={2}\r\n                aria-label=\"Small\"\r\n                valueLabelDisplay=\"auto\"\r\n                min={2}\r\n                max={15}\r\n                getAriaValueText={getAriaValueText}>\r\n            </Material.Slider>\r\n            <Material.Button\r\n                onClick={() => apply(value)}\r\n                variant=\"outlined\">\r\n                Apply\r\n            </Material.Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { BlurView };\r\n","import '../styles/EffectsWindow.css';\nimport * as React from 'react';\nimport * as Material from '@mui/material';\nimport Draggable from 'react-draggable';\n\nimport { toGrayscale } from '../algorithms/grayscale';\nimport { setLightness } from '../algorithms/lightness';\nimport { setSaturation } from '../algorithms/saturation';\nimport { setContrast } from '../algorithms/contrast';\nimport { blur } from '../algorithms/blur';\n\nimport { LightnessView } from './LightnessView';\nimport { SaturationView } from './SaturationView';\nimport { ContrastView } from './ContrastView';\nimport { BlurView } from './BlurView';\n\nconst EffectsWindow = ({ shown, setVisibility, addEffect, previewEffect, forceUpdate }) => {\n    const [currentView, setCurrentView] = React.useState(null);\n\n    const grayscaleEffect = () => { addEffect('Grayscale', '#111', toGrayscale); close(); }\n    const lightnessEffect = (value) => { addEffect('Lightness', '#555', setLightness, [value]); close(); }\n    const saturationEffect = (value) => { addEffect('Saturation', '#334', setSaturation, [value]); close(); }\n    const contrastEffect = (value) => { addEffect('Contrast', '#243', setContrast, [value]); close(); }\n    const blurEffect = (value) => { addEffect('Blur', '#543', blur, [value]); close(); }\n\n    const close = (force = false) => {\n        setCurrentView(null);\n        setVisibility(false);\n        if (force) forceUpdate();\n    }\n\n    const showLightnessView = () => {\n        setCurrentView(<LightnessView preview={previewEffect} apply={lightnessEffect} />);\n    }\n\n    const showSaturationView = () => {\n        setCurrentView(<SaturationView preview={previewEffect} apply={saturationEffect} />);\n    }\n\n    const showContrastView = () => {\n        setCurrentView(<ContrastView preview={previewEffect} apply={contrastEffect} />);\n    }\n\n    const showBlurView = () => {\n        setCurrentView(<BlurView preview={previewEffect} apply={blurEffect} />);\n    }\n\n    return (\n        shown ? <Draggable handle=\".row\" defaultPosition={{ x: 10, y: 10 }}>\n            <div className=\"effects-window\">\n                <div style={{ display: \"flex\" }}>\n                    {\n                        currentView\n                            ? <div onClick={() => { setCurrentView(null); forceUpdate(); }} className=\"back-button\">‹</div>\n                            : null\n                    }\n                    <div className=\"row\">\n                        <label className=\"title-bar\">Filters</label>\n                    </div>\n                    <div onClick={() => close(true)} className=\"close-button\">✕</div>\n                </div>\n                <div style={{ margin: \"10px 0px 10px 0px\", overflowY: \"auto\", overflowX: \"hidden\" }}>\n                    {\n                        currentView ? currentView :\n                            <Material.List>\n                                <Material.ListItem\n                                    className=\"effects-list-item\"\n                                    onClick={grayscaleEffect}>\n                                    Grayscale\n                                </Material.ListItem>\n                                <Material.ListItem\n                                    className=\"effects-list-item\"\n                                    onClick={showLightnessView}>\n                                    Lightness\n                                </Material.ListItem>\n                                <Material.ListItem\n                                    className=\"effects-list-item\"\n                                    onClick={showSaturationView}>\n                                    Saturation\n                                </Material.ListItem>\n                                <Material.ListItem\n                                    className=\"effects-list-item\"\n                                    onClick={showContrastView}>\n                                    Contrast\n                                </Material.ListItem>\n                                <Material.ListItem\n                                    className=\"effects-list-item\"\n                                    onClick={showBlurView}>\n                                    Blur\n                                </Material.ListItem>\n                            </Material.List>\n                    }\n                </div>\n            </div>\n        </Draggable> : null\n    );\n}\n\nexport { EffectsWindow };\n","import '../styles/App.css';\nimport * as React from 'react';\nimport * as Material from '@mui/material';\n\nimport { ImageView } from './ImageView';\nimport { EffectsView } from './EffectsView';\nimport { EffectsWindow } from './EffectsWindow';\n\nconst App = () => {\n    const [imgLoaded, setImgLoaded] = React.useState(false);\n    const [imgSrc, setImgSrc] = React.useState('');\n\n    const [imgWidth, setImgWidth] = React.useState(0);\n    const [imgHeight, setImgHeight] = React.useState(0);\n    const [imgPixels, setImgPixels] = React.useState(new Uint8ClampedArray());\n    const [result, setResult] = React.useState(new Uint8ClampedArray());\n\n    const [effectsWindow, setEffectsWindow] = React.useState(false);\n    const [effects, setEffects] = React.useState([]);\n    const [lastKey, setLastKey] = React.useState(0);\n\n    const onImageLoad = (e) => {\n        if (!(e.path && e.path.length && e.path.length > 0)) return;\n        // Display image\n        const image = e.path[0];\n        setImgSrc(image.src);\n        setImgWidth(image.width);\n        setImgHeight(image.height);\n        // Draw image on canvas\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = '#fff';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0);\n        // Get image pixels\n        const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n        setImgPixels(data);\n        setResult(data);\n        setEffects([]);\n        setImgLoaded(true);\n    }\n\n    const onFileLoad = (e) => {\n        const image = new Image();\n        image.onload = onImageLoad;\n        image.src = e.target.result;\n    }\n\n    const onFileDrop = (files) => {\n        if (!(files && files.length && files.length > 0)) return;\n        const reader = new FileReader();\n        reader.onload = onFileLoad;\n        reader.readAsDataURL(files[0]);\n    }\n\n    const displayImage = (pixels) => {\n        const data = new ImageData(pixels, imgWidth, imgHeight);\n        const canvas = document.createElement('canvas');\n        canvas.width = imgWidth;\n        canvas.height = imgHeight;\n        const ctx = canvas.getContext('2d');\n        ctx.putImageData(data, 0, 0);\n        setImgSrc(canvas.toDataURL());\n    }\n\n    const previewEffect = (effect, args = null) => {\n        if (!imgLoaded) return;\n        const params = [result, imgWidth, imgHeight];\n        if (args) params.push(...args);\n        displayImage(effect(...params));\n    }\n\n    const addEffect = (name, color, effect, args = null) => {\n        if (!imgLoaded) return;\n        // Apply effect\n        const params = [result, imgWidth, imgHeight];\n        if (args) params.push(...args);\n        const pixels = effect(...params);\n        // Save effect\n        const newEffect = {\n            key: lastKey,\n            name: name,\n            color: color,\n            effect: effect,\n            args: args\n        };\n        setLastKey(lastKey + 1);\n        // Save result\n        displayImage(pixels);\n        setResult(pixels);\n        setEffects([...effects, newEffect]);\n    }\n\n    const removeEffect = (effect) => {\n        const index = effects.findIndex((e) => e.key === effect.key);\n        const newEffects = effects.slice(0, index).concat(effects.slice(index + 1));\n        applyEffects(newEffects);\n        setEffects(newEffects);\n    }\n\n    const applyEffects = (newEffects) => {\n        // Copy original pixels\n        let newImage = new Uint8ClampedArray(imgPixels.length);\n        for (let i = 0; i < imgPixels.length; i++) {\n            newImage[i] = imgPixels[i];\n        }\n        // Apply effects\n        for (let i = 0; i < newEffects.length; i++) {\n            const effect = newEffects[i].effect;\n            const args = newEffects[i].args;\n            const params = [newImage, imgWidth, imgHeight];\n            if (args) params.push(...args);\n            newImage = effect(...params);\n        }\n        displayImage(newImage);\n        setResult(newImage);\n    }\n\n    const setVisibility = (value) => {\n        setEffectsWindow(value);\n    }\n\n    const forceUpdate = () => {\n        if (imgLoaded) {\n            applyEffects(effects);\n        }\n    }\n\n    const download = () => {\n        var hiddenElement = document.createElement('a');\n        hiddenElement.href = imgSrc;\n        hiddenElement.target = '_blank';\n        hiddenElement.download = 'export.png';\n        hiddenElement.click();\n    }\n\n    return (\n        <div className=\"app\">\n            <input id=\"input-file\" type=\"file\" onChange={(e) => {\n                onFileDrop(e.target.files);\n            }} style={{ visibility: \"hidden\", position: \"absolute\" }}/>\n            <Material.Button\n                variant=\"contained\"\n                onClick={download}\n                style={{position: \"absolute\"}}>\n                Save\n            </Material.Button>\n            <label className=\"upload-button\" htmlFor=\"input-file\">\n                <ImageView onDrop={onFileDrop} image={imgSrc} />\n            </label>\n            <div className=\"row\">\n                <EffectsView\n                    effects={effects}\n                    setVisibility={setVisibility}\n                    removeEffect={removeEffect} />\n            </div>\n            <EffectsWindow\n                shown={effectsWindow}\n                setVisibility={setVisibility}\n                addEffect={addEffect}\n                previewEffect={previewEffect}\n                forceUpdate={forceUpdate} />\n        </div>\n    );\n}\n\nexport { App };\n","import './styles/index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './components/App.jsx';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}